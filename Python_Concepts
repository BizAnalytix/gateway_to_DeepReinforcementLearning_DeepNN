ClassMethod vs Static Method - 
We can use a class method without making an object of a class(Person) using @classmethod.
In @classmethod a cls variable is passed as an argument instead of self variable like other methods of class. 
While in staticmethod, neither class variable is passed nor self variable.



# Python program to demonstrate 
# use of class method and static method. 
from datetime import date 

class Person: 
	def __init__(self, name, age): 
		self.name = name 
		self.age = age 
	
	# a class method to create a Person object by birth year. 
	@classmethod
	def fromBirthYear(cls, name, year): 
		return cls(name, date.today().year - year) 
	
	# a static method to check if a Person is adult or not. 
	@staticmethod
	def isAdult(age): 
		return age > 18

person1 = Person('mayank', 21) 
person2 = Person.fromBirthYear('mayank', 1996) 

print person1.age 
print person2.age 

# print the result 
print Person.isAdult(22) 


2.
python -m pip tells python to run with the pip module as the main module.

python pip isn't understood, because pip isn't a command line argument that python understands (i.e., pip is a module).

DOUBT___---!pip install -q gTTS DOUBT

3.Enumerate() in Python
A lot of times when dealing with iterators, we also get a need to keep a count of iterations. 
Python eases the programmersâ€™ task by providing a built-in function enumerate() for this task.
Enumerate() method adds a counter to an iterable and returns it in a form of enumerate object. This enumerate object can then be used directly in for loops or be converted into a list of tuples using list() method.

266

With __future__ module's inclusion, you can slowly be accustomed to incompatible changes or to such ones introducing new keywords.

E.g., for using context managers, you had to do from __future__ import with_statement in 2.5, as the with keyword was new and shouldn't be used as variable names any longer. In order to be able to use a program which uses variables named with, the above import statement is needed.

Another example is

from __future__ import division
print 8/7  # prints 1.1428571428571428
print 8//7 # prints 1
Without the __future__ stuff, both print statements would print 1.
